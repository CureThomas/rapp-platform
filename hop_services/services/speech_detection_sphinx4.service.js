hop = require('hop');
//Fs = require('./fileUtils.js');

console.log(hop.hostname);
console.log(hop.port);

var user = process.env.LOGNAME;
var storePath = "/home/" + user + "/hop_temps/"; 
var rosService = "/ric/speech_detection_sphinx4_batch";

service speech_detection_sphinx4( {fileUrl: '', language: '', audio_source: '', words: [], sentences: [], grammar: [], user: ''} ){
  console.log('Service invocation. Preparing response');
  console.log('Audio source file stored at:', fileUrl);
  console.log('Words to search for:', words);
  console.log('Sentences:', sentences);
  console.log('Grammar:', grammar);
  return hop.HTTPResponseAsync(
    function( sendResponse ) { 
      // sendResponse is a function argument that is generated by Hop to complete the service when the response is ready
      // here you need to send a message to rosbridge, prepare a callback to handle the result, and then  sendResponse( result ) in the callback body to actually return the service result.
      //var fileName = "speech-" + "bitch" + ".wav";
      //var audioFileUrl = Fs.resolvePath( storePath + fileName );
      //Fs.writeFileSync( audioFileUrl, fileData );
      var args = {
        'path': /*audioFileUrl*/fileUrl,
        'audio_source': audio_source,
        'words': ['ναι', 'οχι'],
        'sentences': ['ναι', 'οχι'],
        'grammar': [],
        'language': language,
        'user': user
      };

      var ros_srv_call = {
        'op': 'call_service',
         'service': rosService,
         'args': args,
         'id': ' '
      };

      var rosWS = new WebSocket('ws://localhost:9090');
      rosWS.onopen = function(){
        console.log('Connection to rosbridge established');
        this.send(JSON.stringify(ros_srv_call));
      }
      rosWS.onclose = function(){
        console.log('Connection to rosbridge closed');
      }
      rosWS.onmessage = function(event){
        console.log('Received message from rosbridge');
        var resp_msg = event.value;
        sendResponse( resp_msg );
        console.log(resp_msg);
        this.close();
        rosWS = undefined;
      }

    }, this ); // do not forget the <this> argument of hop.HTTResponseAsync 
}

//function craft_ros_srv_args(file_url)
//{
  //var timeNow = new Date().getTime();
  //var args = {};

  //args['path'] = 
  //return args;
//};

